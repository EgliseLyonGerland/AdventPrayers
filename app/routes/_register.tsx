import { json } from "@remix-run/node";
import { Outlet, useLoaderData, useLocation } from "@remix-run/react";
import clsx from "clsx";
import { motion } from "framer-motion";
import { useState } from "react";

import Logo from "~/components/logo";
import Message from "~/components/register/message";
import { AppNameQuoted } from "~/config";
import { getCurrentDraw } from "~/models/draw.server";

export const loader = async () => {
  const draw = await getCurrentDraw();

  return json({ draw });
};

export default function Index() {
  const { draw } = useLoaderData<typeof loader>();
  const location = useLocation();
  const index = location.pathname === "/";
  const [complete, setComplete] = useState(!index);
  const [ready, setReady] = useState(!index);

  if (!draw) {
    return (
      <Message>
        {[
          "ğŸ‘‹ Hey !",
          <>
            Ã‡a me fait plaisir de te voir ici mais il semble que tu sois un
            petit trop pressÃ© de participer Ã  la prochaine Ã©dition de{" "}
            {AppNameQuoted}.
          </>,
          <>
            Si tu fais partie des contacts de lâ€˜
            <a
              className="link-secondary link"
              href="https://egliselyongerland.org"
              rel="noreferrer"
              target="_blank"
            >
              Ã©glise Lyon-Gerland
            </a>{" "}
            et/ou que tu tâ€˜y rends rÃ©guliÃ¨rement, alors il y a de grandes
            chances que tu sois informÃ©s du moment oÃ¹ les inscriptions
            dÃ©buteront.
          </>,
          "A bientÃ´t jâ€˜espÃ¨re. ğŸ˜‰",
        ]}
      </Message>
    );
  }

  if (draw.drawn) {
    return (
      <Message>
        {[
          "Arf, Ã§a sâ€˜est jouÃ© Ã  pas grand chose ğŸ˜”",
          `Lâ€˜opÃ©ration ${AppNameQuoted} a dÃ©jÃ  commencÃ© malheureusement. Il nâ€˜est donc plus possible pour toi de tâ€˜inscrire.`,
          "Mais il est fort propable quâ€˜on recommence lâ€˜annÃ©e prochaine. Alors stay tuned!",
          "A bientÃ´t. ğŸ˜‰",
        ]}
      </Message>
    );
  }

  return (
    <main className="h-[100svh] overflow-hidden">
      <motion.div
        className={clsx(
          "fixed inset-x-8 h-0 flex-center",
          ready ? "top-16 md:top-32" : "top-[50vh]",
        )}
        layout={true}
        layoutId="logo"
        transition={{
          duration: 1,
          type: "tween",
          ease: "anticipate",
        }}
      >
        <Logo
          animate={index ? !complete : false}
          className={clsx(
            "max-w-full transition-[height] duration-1000 ease-in-out",
            complete ? "h-16 md:h-32" : "h-40",
          )}
          onAnimationComplete={() => {
            setTimeout(() => {
              setComplete(true);
            }, 2000);
            setTimeout(() => {
              setReady(true);
            }, 3000);
          }}
        />
      </motion.div>

      {ready ? <Outlet /> : null}
    </main>
  );
}
